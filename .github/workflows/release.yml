name: Release

env:
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUST_BACKTRACE: short
  RUSTUP_MAX_RETRIES: 10

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: "Tag name for release"
        required: false
        default: nightly
  push:
    tags:
      - "v*"

jobs:
  build:
    name: Build release binaries
    strategy:
      fail-fast: true
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: rust8-x86_64-unknown-linux-gnu.tar.gz

          - target: x86_64-apple-darwin
            os: macos-latest
            name: rust8-x86_64-apple-darwin.tar.gz

          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: rust8-x86_64-pc-windows-msvc.zip

    runs-on: ${{ matrix.os }}
    continue-on-error: false

    steps:
      - name: Setup | Checkout
        uses: actions/checkout@v3

      - name: Setup | Rust
        uses: actions-rs/toolchain@v1.0.7
        with:
          toolchain: stable
          override: true
          profile: minimal
          target: ${{ matrix.target }}

      - name: Setup | Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build | Build
        uses: actions-rs/cargo@v1.0.3
        with:
          command: build
          args: --release --locked

      - name: Post Build | Prepare artifacts [Windows]
        if: matrix.os == 'windows-latest'
        working-directory: target/release
        run: 7z a ../../${{ matrix.name }} rust8.exe

      - name: Post Build | Prepare artifacts [-nix]
        if: matrix.os != 'windows-latest'
        working-directory: target/release
        run: tar czvf ../../${{ matrix.name }} rust8

      - name: Post Build | Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.name }}
          path: ${{ matrix.name }}
          if-no-files-found: error
          retention-days: 5

  # Create GitHub Release
  publish:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Setup | Checkout
        uses: actions/checkout@v3

      - name: Setup | Set Release Tag [Dispatch]
        if: github.event_name == 'workflow_dispatch'
        run: echo "TAG_NAME=${{ github.event.inputs.tag_name }}" >> $GITHUB_ENV

      - name: Setup | Artifacts
        uses: actions/download-artifact@v3

      - name: Setup | Checksums
        run: for file in rust8-*/rust8-*; do openssl dgst -sha256 -r "$file" | awk '{print $1}' > "${file}.sha256"; done

      - name: Build | Publish
        uses: softprops/action-gh-release@v1
        with:
          fail_on_unmatched_files: true
          generate_release_notes: false
          tag_name: ${{ env.TAG_NAME }}
          files: rust8-*/rust8-*
